#ifndef CaPTkSurvival_h
#define CaPTkSurvival_h

// The following header file is generated by CMake and thus it's located in
// the build directory. It provides an export macro for classes and functions
// that you want to be part of the public interface of your module.
#include <MitkCaPTkSurvivalExports.h>

#include <QObject>
#include <QFuture>
#include <QFutureWatcher>

namespace captk {
/** \class CaPTkSurvival
 *  \brief Survival Prediction Index Module API
 */
class MITKCAPTKSURVIVAL_EXPORT CaPTkSurvival : public QObject
{
    Q_OBJECT

public:
    CaPTkSurvival(QObject *parent = 0);

    ~CaPTkSurvival() {}


    /** \brief Runs the algorithm
     * 
     * Execute the algorithm in a background thread. When the
     * algorithm finishes, OnAlgorithmFinished() is called.
     * 
     * @param QString subjectDirPath path to the subject directory
     * @param QString modelDirPath path to the model directory
     * @param QString outputDirPath path to the desired output directory
     * @param bool trainNewModel whether to train a new model or not (if false, use an existing model)
     * @param bool useCustomModel whether a custom model is being used (if false, use CBICA CaPTk model)
    */
    void Run(
            QString modelDir,
            QString subjectDir,
            QString outputDir,
            bool trainNewModel,
            bool useCustomModel
    );

    /** \struct Result
     *  \brief result of the execution of the algorithm
     * 
     * if ok == true, then everything went fine, 
     * else errorMessage is populated.
    */
    typedef struct Result 
    {
        bool ok = true;
        std::string errorMessage = "";
    } Result;

public slots:
    /** \brief This function runs in the main thread when 
     * the algorithm is finished
    */
    void OnAlgorithmFinished();

protected:
    QString m_CbicaModelDir;

    /** \brief Runs the algorithm after the operations in Run
     * 
     * This can serve as a background thread. When the
     * algorithm finishes, OnAlgorithmFinished() is called.
     * The parameters are the same as Run()
     * 
     * @return the result struct (that contains the output or an errorMessage)
    */
    Result RunThread(
            QString modelDir,
            QString subjectDir,
            QString outputDir,
            bool trainNewModel,
            bool useCustomModel,
            QString cbicaModelDir
    );

    bool m_IsRunning = false;
    QFutureWatcher<Result> m_Watcher;
    QFuture<Result> m_FutureResult;

};
}

#endif // ! CaPTkSurvival_h
